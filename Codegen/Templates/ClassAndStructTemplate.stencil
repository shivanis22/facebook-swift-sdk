{# Macros for determining specific types #}
{% macro isClass variable %}{% if variable.type.kind == "class" %}true{% endif %}{% endmacro %}
{% macro isEnum variable %}{% if variable.type.kind == "enum" %}true{% endif %}{% endmacro %}
{% macro isCustomType variable %}{% if variable.type %}true{% endif %}{% endmacro %}
{% macro isEnumArray variable %}{% if variable.typeName.array.elementType.kind == "enum" %}true{% endif %}{% endmacro %}
{% macro isStruct variable %}{% if variable.type.kind == "struct" %}true{% endif %}{% endmacro %}
{% macro isClosureType variable %}{% if variable.typeName.isClosure %}true{% endif %}{% endmacro %}
{% macro associatedTypeName associatedValue %}{{ associatedValue.type.name }}{% endmacro %}

{# Macros for setting parameters in ObjC initializer #}
{% macro classOrStructParameterForInitializer variable %}
  // Class or struct
  {{ variable.name }}: _ObjC{{ variable.typeName }}{% if variable.isOptional %}?{% endif %}{% if not forloop.last %},{% endif %}
{% endmacro %}
{# --- #}
{% macro enumParameterForInitializer variable %}
  // Enum
  {{ variable.name }}: Any{% if variable.isOptional %}?{% endif %}{% if not forloop.last %},{% endif %}
{% endmacro %}
{# --- #}
{% macro enumArrayParameterForInitializer variable %}
  // Enum Array
  {{ variable.name }}: Any{% if variable.isOptional %}?{% endif %}{% if not forloop.last %},{% endif %}
{% endmacro %}
{# --- #}
{% macro nativeTypeParameterForInitializer variable %}
  // Native type
  {{ variable.name }}: {{ variable.typeName }}{% if variable.defaultValue != nil %} = {{ variable.defaultValue }}{% endif %}{% if not forloop.last %},{% endif %}
{% endmacro %}

{# Macros for calling initializer on backing type #}
{% macro setEnumValueOnBackingType variable %}
  {{ variable.name }}: enumeration{{ forloop.counter }}.{{ variable.typeName|lowerFirstWord }}{% if not forloop.last %},{% endif %}
{% endmacro %}
{# --- #}
{% macro setEnumArrayValueOnBackingType variable %}
  {{ variable.name }}: mappedEnumerations{{ forloop.counter }}{% if not forloop.last %},{% endif %}
{% endmacro %}
{# --- #}
{% macro setCustomValueOnBackingType variable %}
  {{ variable.name }}: {{ variable.name }}.{{ variable.typeName|lowerFirstWord }}{% if not forloop.last %},{% endif %}
{% endmacro %}
{# --- #}
{% macro setNativeValueOnBackingType variable %}
  {{ variable.name }}: {{ variable.name }}{% if not forloop.last %},{% endif %}
{% endmacro %}

import Foundation

{% for type in types.implementing.ObjCBridgeable|struct where type.accessLevel == "public" %}

@objc(FB{{ type.name }})
public class _ObjC{{ type.name }} : NSObject {
  private (set) var {{ type.name|lowerFirstWord }}: {{ type.name }}

  // TODO: Probably remove this if no clear use case arises
  public init({{ type.name|lowerFirstWord }}: {{ type.name }}) {
    self.{{ type.name|lowerFirstWord }} = {{ type.name|lowerFirstWord }}
  }

  {% include "./Shared/SetupInitializer.stencil" %}
  {% include "./Shared/SetupProperties.stencil" %}
  {% include "./Shared/SetupMethods.stencil" %}
  {% include "./Shared/Equatable.stencil" %}
  {% include "./Shared/Comparable.stencil" %}
}
{% endfor %}
{#  #}
{% for type in types.implementing.ObjCBridgeable|class where type.accessLevel == "public" %}

@objc(FB{{ type.name }})
public class _ObjC{{ type.name }} : NSObject {
  private (set) var {{ type.name|lowerFirstWord }}: {{ type.name }}

  // TODO: Probably remove this if no clear use case arises
  public init({{ type.name|lowerFirstWord }}: {{ type.name }}) {
    self.{{ type.name|lowerFirstWord }} = {{ type.name|lowerFirstWord }}
  }

  {% include "./Shared/SetupInitializer.stencil" %}
  {% include "./Shared/SetupProperties.stencil" %}
  {% include "./Shared/SetupMethods.stencil" %}
  {% include "./Shared/Equatable.stencil" %}
  {% include "./Shared/Comparable.stencil" %}
}
{% endfor %}
